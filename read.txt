

xUtils下载文件最简单的例子：
DownloadManager.getInstance().startDownload(
            "url", "lable",
            "/sdcard/xUtils/" + label + ".aar", true, false, null);

void org.xutils.sample.download.DownloadManager.startDownload(String url, String label, String savePath, boolean autoResume, boolean autoRename, DownloadViewHolder viewHolder) throws DbException



xUtils下载绑定图片最简单的例子：
ImageOptions imageOptions = new ImageOptions.Builder()
		.setSize(DensityUtil.dip2px(120), DensityUtil.dip2px(120))
		.setRadius(DensityUtil.dip2px(5))
		// 如果ImageView的大小不是定义为wrap_content, 不要crop.
		.setCrop(true)
		// 加载中或错误图片的ScaleType
		// .setPlaceholderScaleType(ImageView.ScaleType.MATRIX)
		.setImageScaleType(ImageView.ScaleType.CENTER_CROP)
		// 设置加载过程中的图片
		.setLoadingDrawableId(R.drawable.ic_launcher)
		// 设置加载失败后的图片
		.setFailureDrawableId(R.drawable.ic_launcher)
		// 设置使用缓存
		.setUseMemCache(true)
		// 设置支持gif
		.setIgnoreGif(false)
		// 设置显示圆形图片
		// .setCircular(false)
		.build();
x.image().bind(imageView, "http://img2.3lian.com/2014/f2/164/d/17.jpg",
		imageOptions);


xUtils网络请求最简单的例子：
x.http().get(new RequestParams("http://ip168.com/json.do?view=myipaddress"),
	new Callback.CommonCallback<String>() {
	@Override
	public void onSuccess(String result) {
	Log.v("tt", "result: " + result);
	}

	@Override
	public void onError(Throwable ex, boolean isOnCallback) {
		Log.v("tt", "onError: " + ex);
	}

	@Override
	public void onCancelled(CancelledException cex) {
		Log.v("tt", "onCancelled: " + cex);
	}

	@Override
	public void onFinished() {
		Log.v("tt", "onFinished");
	}
	});



自己写的一个基于注解的demo：

package com.example.testxutil.annotation;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

import android.app.Activity;
import android.view.View;
import android.view.View.OnClickListener;

public class ViewUtil {

	public static void findAllView(Object obj) {
		if (obj == null) {
			return;
		}
		Field field = null;
		Method method = null;
		try {
			Field[] fields = obj.getClass().getDeclaredFields();
			if ((fields != null) && (fields.length > 0)) {
				for (int i = 0; i < fields.length; i++) {
					field = fields[i];
					Id id = (Id) field.getAnnotation(Id.class);
					if (id != null) {
						View view = ((Activity) obj).findViewById(id.value());
						field.setAccessible(true);
						field.set(obj, view);
					}
				}
			}

			Method[] methods = obj.getClass().getDeclaredMethods();
			if ((methods != null) && (methods.length > 0)) {
				for (int i = 0; i < methods.length; i++) {
					method = methods[i];
					Id id = (Id) method.getAnnotation(Id.class);
					if (id != null) {
						View view = ((Activity) obj).findViewById(id.value());
						if (view != null) {
							final Object tempObj = obj;
							final Method tempMethod = method;

							Class<?> listenerType = id.type();
							String listenerSetter = "set"
									+ listenerType.getSimpleName();

							Object listener = Proxy.newProxyInstance(
									listenerType.getClassLoader(),
									new Class[] { listenerType },
									new InvocationHandler() {
										@Override
										public Object invoke(Object proxy,
												Method method, Object[] args)
												throws Throwable {
											boolean setAccessible = false;
											if (!tempMethod.isAccessible()) {
												setAccessible = true;
												tempMethod.setAccessible(true);
											}
											Object result = tempMethod.invoke(
													tempObj, args);
											if (setAccessible) {
												tempMethod.setAccessible(false);
											}
											return result;
										}
									});

							Method setEventListenerMethod = view.getClass()
									.getMethod(listenerSetter,
											new Class[] { listenerType });
							setEventListenerMethod.invoke(view,
									new Object[] { listener });
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public @interface Id {
		int value();

		Class<?> type() default OnClickListener.class;
	}
}



